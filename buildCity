using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class buildCity : MonoBehaviour
{
    public GameObject[] buildings;
    public GameObject[] floors;
    public GameObject streetsX;
    public GameObject streetsZ;
    public GameObject crossStreets;

    int[,] mapgrid; //generates 2d array to allow roads to pass through Perlin Noise
         
    public GameObject[] downtown;
    public GameObject[] residential;
    public GameObject[] shopping;
    public GameObject[] municiple;
    public GameObject[] industrial;

    public int mapWidth = 20;
    public int mapHeight = 20;
    int buldingFootprint = 45;

    int numFloors;
    int levels;

    void Start()
    {
        mapgrid = new int[mapHeight, mapHeight];
        float seed = Random.Range(0, 100);      

        Debug.Log("Seed: " + seed);

        //gen map data
        for (int h = 0; h < mapHeight; h++)
        {
            for (int w = 0; w < mapWidth; w++)
            {
                mapgrid[w, h] = (int)(Mathf.PerlinNoise(w / 10.0f + seed, h / 10.0f + seed) * 10); //stores Perlin noise data at points into mapgrid array (div by 10 increases noise distribution)
            }
        }

        //lay streets
        int x = 0;
        for (int n = 0; n < 50; n++)
        {
            for (int h = 0; h < mapHeight; h++)
            {
                mapgrid[x, h] = -1;
            }
            x += Random.Range(3, 5); //3,3
            if (x >= mapWidth) break; //Stop laying roads if end of map reached
        }

        int z = 0;
        for (int n = 0; n < 10; n++)
        {
            for (int w = 0; w < mapWidth; w++)
            {
                if (mapgrid[w, z] == -1)
                    mapgrid[w,z] = -3; // If location is already -1, replace with -3

                else if (mapgrid[w, z] != -1) mapgrid[w, z] = -2;
            }
            z += Random.Range(3, 15); //2,20
            if (z >= mapHeight) break;
        }           
                
        for (int h = 0; h < mapHeight; h++)
        {
            for (int w = 0; w < mapWidth; w++)
            {
                int result = mapgrid[w,h];
                Vector3 pos = new Vector3(w * buldingFootprint, 0, h * buldingFootprint); //(x, y, z) y = 0 to ensure buildings are placed on the ground plane.
                //int n = Random.Range(0, buildings.Length);
                if (result < -2)
                    Instantiate(crossStreets, pos, crossStreets.transform.rotation);
                else if (result < -1)
                    Instantiate(streetsZ, pos, streetsZ.transform.rotation);
                else if (result < 0)
                    Instantiate(streetsX, pos, streetsX.transform.rotation);
                else if (result < 1)
                {
                    numFloors = Random.Range(0, 10);
                    levels = 1;
                    Instantiate(buildings[0], pos, Quaternion.identity);
                    for (int i = 0; i < numFloors; i++)
                    {
                        levels += 3;
                        for (int j = 0; j < numFloors; j++)
                        {
                            Instantiate(buildings[0], new Vector3(w * buldingFootprint, levels, h * buldingFootprint), Quaternion.identity);
                            break;
                        }
                    }
                }
                else if (result < 2) // closest to 'parks' should be residential or smaller buildings
                {
                    numFloors = Random.Range(0, 10);
                    levels = 1;
                    Instantiate(buildings[1], pos, Quaternion.identity);
                    for (int i = 0; i < numFloors; i++)
                    {
                        levels += 3;
                        for (int j = 0; j < numFloors; j++)
                        {
                            Instantiate(buildings[1], new Vector3(w * buldingFootprint, levels, h * buldingFootprint), Quaternion.identity);
                            break;
                        }
                    }
                } 
                else if (result < 4)
                {
                    numFloors = Random.Range(0, 10);
                    levels = 1;
                    Instantiate(buildings[2], pos, Quaternion.identity);
                    for (int i = 0; i < numFloors; i++)
                    {
                        levels += 3;
                        for (int j = 0; j < numFloors; j++)
                        {
                            Instantiate(buildings[2], new Vector3(w * buldingFootprint, levels, h * buldingFootprint), Quaternion.identity);
                            break;
                        }
                    }
                }
                else if (result < 6)
                {
                    numFloors = Random.Range(0, 10);
                    levels = 1;
                    Instantiate(buildings[3], pos, Quaternion.identity);
                    for (int i = 0; i < numFloors; i++)
                    {
                        levels += 3;
                        for (int j = 0; j < numFloors; j++)
                        {
                            Instantiate(buildings[3], new Vector3(w * buldingFootprint, levels, h * buldingFootprint), Quaternion.identity);
                            break;
                        }
                    }
                }
                else if (result < 8)
                {
                    numFloors = Random.Range(0, 10);
                    levels = 1;
                    Instantiate(buildings[4], pos, Quaternion.identity);
                    for (int i = 0; i < numFloors; i++)
                    {
                        levels += 3;
                        for (int j = 0; j < numFloors; j++)
                        {
                            Instantiate(buildings[4], new Vector3(w * buldingFootprint, levels, h * buldingFootprint), Quaternion.identity);
                            break;
                        }
                    }
                }
                else if (result <= 10)
                    Instantiate(buildings[5], pos, Quaternion.identity); //Instantiates grass, move to < 1; should be tallest buildings
            }
        }

    }

    void build()
    {
        int buildingChoice = Random.Range(0, 5); //Chooses type of building
        numFloors = Random.Range(0, 2);
        levels = 0;

       Instantiate(buildings[buildingChoice], new Vector3(0, levels, 0), Quaternion.identity); //Instantiates first floor of buildingChoice

        Debug.Log("buildingChoice: " + buildingChoice);

        for (int i = 0; i < numFloors; i++)
        {
            levels += 3;
            for (int j = 0; j < numFloors; j++)
            {
                Instantiate(buildings[buildingChoice], new Vector3(0, levels, 0), Quaternion.identity);
                break;
            }
        }
    }
}
